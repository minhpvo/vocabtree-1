<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>bench_all.cxx</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__all_8cxx</filename>
    <includes id="bench__config_8hpp" name="bench_config.hpp" local="yes" imported="no">bench_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="misc_8hpp" name="misc.hpp" local="no" imported="no">utils/misc.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="no" imported="no">utils/image.hpp</includes>
    <includes id="cycletimer_8hpp" name="cycletimer.hpp" local="no" imported="no">utils/cycletimer.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="no" imported="no">search/inverted_index/inverted_index.hpp</includes>
    <includes id="vocab__tree_8hpp" name="vocab_tree.hpp" local="no" imported="no">search/vocab_tree/vocab_tree.hpp</includes>
    <includes id="matches__page_8hpp" name="matches_page.hpp" local="no" imported="no">vis/matches_page.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP void</type>
      <name>compute_features</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a3a6f8aa09e8f684372e9d14409ddf538</anchor>
      <arglist>(Dataset &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_bow_features</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a80f719179d28279bc6c42046c30708b1</anchor>
      <arglist>(Dataset &amp;dataset, std::shared_ptr&lt; BagOfWords &gt; bow, uint32_t num_clusters)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; VocabTree &gt;</type>
      <name>train_tree</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>aa851044cf03e3d2b90e81686f7354cbd</anchor>
      <arglist>(Dataset &amp;dataset, uint32_t num_images, uint32_t split, uint32_t depth)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; BagOfWords &gt;</type>
      <name>train_bow</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a1f9e3958b5892fa473863636ec4a4d73</anchor>
      <arglist>(Dataset &amp;dataset, uint32_t num_images, uint32_t num_clusters)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; InvertedIndex &gt;</type>
      <name>train_index</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a6d73d104a66d4771c652285e211e1fae</anchor>
      <arglist>(Dataset &amp;dataset, std::shared_ptr&lt; BagOfWords &gt; bow)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>benchmark_dataset</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a5b90f9a18ea62986f9a54f37b92c0ae9</anchor>
      <arglist>(Dataset &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>bench__all_8cxx.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bench_bow.cxx</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__bow_8cxx</filename>
    <includes id="bench__config_8hpp" name="bench_config.hpp" local="yes" imported="no">bench_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP void</type>
      <name>compute_bow</name>
      <anchorfile>bench__bow_8cxx.html</anchorfile>
      <anchor>aaef33d9504e05c52d54fdae577c151a1</anchor>
      <arglist>(SimpleDataset &amp;dataset, int num_clusters, int num_images, int num_features)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>bench__bow_8cxx.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bench_compute_features.cxx</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__compute__features_8cxx</filename>
    <includes id="bench__config_8hpp" name="bench_config.hpp" local="yes" imported="no">bench_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP void</type>
      <name>compute_features</name>
      <anchorfile>bench__compute__features_8cxx.html</anchorfile>
      <anchor>a6695a0bf072ce49a81eab304c26faed1</anchor>
      <arglist>(const SimpleDataset &amp;dataset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>bench__compute__features_8cxx.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bench_config.hpp</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__config_8hpp</filename>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_simple_data_dir</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a6ff0631ad2217266ff8368896e165864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_simple_database_location</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a746cb2c32aa93b02c1f0e3ff6415d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford_data_dir</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>ad4586555313d552b4964123380619bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford_database_location</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a2aef84bbc6278d85b52d4f816cd42d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>s_oxford_num_clusters</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a29c324f9a17607ef391b42a41d3530be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford100k_data_dir</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>aa6b7aac551614e1fd8789df60b1a79b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford100k_database_location</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a1f90b0536a23b34ae8c47f3ee6b71380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>s_oxford100k_num_clusters</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>aa42dfa9789d16e6e04ff8ba43bf4409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxfordmini_data_dir</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a61079cf0451cb4181d177267d64abc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxfordmini_database_location</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a119a1bf96e1713bea52ea5498d856f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_holidays_data_dir</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a3bc1495a8e2c478adba9388454d5e2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_holidays_database_location</name>
      <anchorfile>bench__config_8hpp.html</anchorfile>
      <anchor>a4cd0852972b48063bd342d5357611d48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bench_index.cxx</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__index_8cxx</filename>
    <includes id="bench__config_8hpp" name="bench_config.hpp" local="yes" imported="no">bench_config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="no" imported="no">search/inverted_index/inverted_index.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP int</type>
      <name>main</name>
      <anchorfile>bench__index_8cxx.html</anchorfile>
      <anchor>a9306418341be659f27ec30656afed137</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bench_search.cxx</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>bench__search_8cxx</filename>
    <includes id="bench__config_8hpp" name="bench_config.hpp" local="yes" imported="no">bench_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="misc_8hpp" name="misc.hpp" local="no" imported="no">utils/misc.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="image_8hpp" name="image.hpp" local="no" imported="no">utils/image.hpp</includes>
    <includes id="cycletimer_8hpp" name="cycletimer.hpp" local="no" imported="no">utils/cycletimer.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="no" imported="no">search/inverted_index/inverted_index.hpp</includes>
    <includes id="matches__page_8hpp" name="matches_page.hpp" local="no" imported="no">vis/matches_page.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP void</type>
      <name>bench_oxford</name>
      <anchorfile>bench__search_8cxx.html</anchorfile>
      <anchor>af3dc289af53b5a3c157c750c71a4c8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>bench__search_8cxx.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>config.hpp</name>
    <path>/home/psastras/vocabtree/modules/</path>
    <filename>config_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_MPI</name>
      <anchorfile>config_8hpp.html</anchorfile>
      <anchor>aa84164aed4ba3c6c236edde52de3930b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_FASTCLUSTER</name>
      <anchorfile>config_8hpp.html</anchorfile>
      <anchor>aba7e819167483168eea1ce997d177563</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_MULTITHREADING</name>
      <anchorfile>config_8hpp.html</anchorfile>
      <anchor>a112b344dd251bdf62eba2d1cbcc97f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_OPENMP</name>
      <anchorfile>config_8hpp.html</anchorfile>
      <anchor>afbd965123c7137962cdc7571c17cbe20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bag_of_words.cxx</name>
    <path>/home/psastras/vocabtree/modules/search/bag_of_words/</path>
    <filename>bag__of__words_8cxx</filename>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="yes" imported="no">bag_of_words.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
  </compound>
  <compound kind="file">
    <name>bag_of_words.hpp</name>
    <path>/home/psastras/vocabtree/modules/search/bag_of_words/</path>
    <filename>bag__of__words_8hpp</filename>
    <includes id="search__base_8hpp" name="search_base.hpp" local="no" imported="no">search/search_base/search_base.hpp</includes>
    <class kind="class">BagOfWords</class>
    <class kind="struct">BagOfWords::TrainParams</class>
    <class kind="struct">BagOfWords::SearchParams</class>
    <class kind="struct">BagOfWords::MatchResults</class>
  </compound>
  <compound kind="file">
    <name>inverted_index.cxx</name>
    <path>/home/psastras/vocabtree/modules/search/inverted_index/</path>
    <filename>inverted__index_8cxx</filename>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="yes" imported="no">inverted_index.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>inverted__index_8cxx.html</anchorfile>
      <anchor>ae63566ea7d5a6efbfbfe3c143868eb65</anchor>
      <arglist>(std::ostream &amp;out, const InvertedIndex::MatchResults &amp;match_results)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inverted_index.hpp</name>
    <path>/home/psastras/vocabtree/modules/search/inverted_index/</path>
    <filename>inverted__index_8hpp</filename>
    <includes id="search__base_8hpp" name="search_base.hpp" local="no" imported="no">search/search_base/search_base.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <class kind="class">InvertedIndex</class>
    <class kind="struct">InvertedIndex::TrainParams</class>
    <class kind="struct">InvertedIndex::SearchParams</class>
    <class kind="struct">InvertedIndex::MatchResults</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>inverted__index_8hpp.html</anchorfile>
      <anchor>ae63566ea7d5a6efbfbfe3c143868eb65</anchor>
      <arglist>(std::ostream &amp;out, const InvertedIndex::MatchResults &amp;match_results)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>search_base.cxx</name>
    <path>/home/psastras/vocabtree/modules/search/search_base/</path>
    <filename>search__base_8cxx</filename>
    <includes id="search__base_8hpp" name="search_base.hpp" local="yes" imported="no">search_base.hpp</includes>
  </compound>
  <compound kind="file">
    <name>search_base.hpp</name>
    <path>/home/psastras/vocabtree/modules/search/search_base/</path>
    <filename>search__base_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="no" imported="no">utils/image.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <class kind="struct">TrainParamsBase</class>
    <class kind="struct">SearchParamsBase</class>
    <class kind="struct">MatchResultsBase</class>
    <class kind="class">SearchBase</class>
  </compound>
  <compound kind="file">
    <name>vocab_tree.cxx</name>
    <path>/home/psastras/vocabtree/modules/search/vocab_tree/</path>
    <filename>vocab__tree_8cxx</filename>
    <includes id="vocab__tree_8hpp" name="vocab_tree.hpp" local="yes" imported="no">vocab_tree.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <class kind="struct">cvmat_header</class>
  </compound>
  <compound kind="file">
    <name>vocab_tree.hpp</name>
    <path>/home/psastras/vocabtree/modules/search/vocab_tree/</path>
    <filename>vocab__tree_8hpp</filename>
    <includes id="search__base_8hpp" name="search_base.hpp" local="no" imported="no">search/search_base/search_base.hpp</includes>
    <class kind="class">VocabTree</class>
    <class kind="struct">VocabTree::TrainParams</class>
    <class kind="struct">VocabTree::SearchParams</class>
    <class kind="struct">VocabTree::MatchResults</class>
    <class kind="struct">VocabTree::TreeNode</class>
  </compound>
  <compound kind="file">
    <name>compute_bow_simple.cxx</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>compute__bow__simple_8cxx</filename>
    <includes id="tests__config_8hpp" name="tests_config.hpp" local="yes" imported="no">tests_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP int</type>
      <name>main</name>
      <anchorfile>compute__bow__simple_8cxx.html</anchorfile>
      <anchor>a9306418341be659f27ec30656afed137</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compute_index_simple.cxx</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>compute__index__simple_8cxx</filename>
    <includes id="tests__config_8hpp" name="tests_config.hpp" local="yes" imported="no">tests_config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="no" imported="no">search/inverted_index/inverted_index.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP int</type>
      <name>main</name>
      <anchorfile>compute__index__simple_8cxx.html</anchorfile>
      <anchor>a9306418341be659f27ec30656afed137</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compute_search_simple.cxx</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>compute__search__simple_8cxx</filename>
    <includes id="tests__config_8hpp" name="tests_config.hpp" local="yes" imported="no">tests_config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="bag__of__words_8hpp" name="bag_of_words.hpp" local="no" imported="no">search/bag_of_words/bag_of_words.hpp</includes>
    <includes id="inverted__index_8hpp" name="inverted_index.hpp" local="no" imported="no">search/inverted_index/inverted_index.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP int</type>
      <name>main</name>
      <anchorfile>compute__search__simple_8cxx.html</anchorfile>
      <anchor>a9306418341be659f27ec30656afed137</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compute_sift_simple.cxx</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>compute__sift__simple_8cxx</filename>
    <includes id="tests__config_8hpp" name="tests_config.hpp" local="yes" imported="no">tests_config.hpp</includes>
    <includes id="config_8hpp" name="config.hpp" local="no" imported="no">config.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <member kind="function">
      <type>_INITIALIZE_EASYLOGGINGPP int</type>
      <name>main</name>
      <anchorfile>compute__sift__simple_8cxx.html</anchorfile>
      <anchor>a9306418341be659f27ec30656afed137</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tests_config.hpp</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>tests__config_8hpp</filename>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_simple_data_dir</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a6ff0631ad2217266ff8368896e165864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_simple_database_location</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a746cb2c32aa93b02c1f0e3ff6415d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford_data_dir</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>ad4586555313d552b4964123380619bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford_database_location</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a2aef84bbc6278d85b52d4f816cd42d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>s_oxford_num_clusters</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a29c324f9a17607ef391b42a41d3530be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxfordmini_data_dir</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a61079cf0451cb4181d177267d64abc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxfordmini_database_location</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a119a1bf96e1713bea52ea5498d856f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford100k_data_dir</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>aa6b7aac551614e1fd8789df60b1a79b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_oxford100k_database_location</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>a1f90b0536a23b34ae8c47f3ee6b71380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>s_oxford100k_num_clusters</name>
      <anchorfile>tests__config_8hpp.html</anchorfile>
      <anchor>aa42dfa9789d16e6e04ff8ba43bf4409f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vocab_tree_simple.cxx</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>vocab__tree__simple_8cxx</filename>
    <includes id="tests__config_8hpp" name="tests_config.hpp" local="yes" imported="no">tests_config.hpp</includes>
    <includes id="vocab__tree_8hpp" name="vocab_tree.hpp" local="no" imported="no">search/vocab_tree/vocab_tree.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <includes id="numerics_8hpp" name="numerics.hpp" local="no" imported="no">utils/numerics.hpp</includes>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="no" imported="no">utils/vision.hpp</includes>
    <includes id="matches__page_8hpp" name="matches_page.hpp" local="no" imported="no">vis/matches_page.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vocab__tree__simple_8cxx.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cycletimer.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>cycletimer_8hpp</filename>
    <namespace>CycleTimer</namespace>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>SysClock</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a756e51d31680afd939df5b3c3bcf599d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SysClock</type>
      <name>currentTicks</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a08ffb5235af5b72ae4383d7238fa4490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>tickUnits</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a5099b2bd5a6f211a3982c2fd03b44e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secondsPerTick</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a0808d22d25de40774ec85e2dd995a457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>msPerTick</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>aed721398a8329a4c2cc293201a819b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentSeconds</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a283f1082702ac6d85b86880d29d53ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ticksPerSecond</name>
      <anchorfile>namespaceCycleTimer.html</anchorfile>
      <anchor>a97d6344da8d39071adf37cca332d218b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dataset.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>dataset_8cxx</filename>
    <includes id="dataset_8hpp" name="dataset.hpp" local="yes" imported="no">dataset.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="yes" imported="no">filesystem.hpp</includes>
    <includes id="vision_8hpp" name="vision.hpp" local="yes" imported="no">vision.hpp</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>dataset_8cxx.html</anchorfile>
      <anchor>a603c8abeb99d0383cdb39680d725b64d</anchor>
      <arglist>(std::ostream &amp;out, const Dataset &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dataset.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>dataset_8hpp</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <class kind="class">Dataset</class>
    <class kind="class">SimpleDataset</class>
    <class kind="class">SimpleDataset::SimpleImage</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>dataset_8hpp.html</anchorfile>
      <anchor>a603c8abeb99d0383cdb39680d725b64d</anchor>
      <arglist>(std::ostream &amp;out, const Dataset &amp;dataset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filesystem.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>filesystem_8cxx</filename>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="yes" imported="no">filesystem.hpp</includes>
    <class kind="struct">filesystem::cvmat_header</class>
    <namespace>filesystem</namespace>
    <member kind="function">
      <type>bool</type>
      <name>file_exists</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a1d10e228c7c784ffc2e9c3c5bfc0dd11</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_directory</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a7df468aa6576b318ff9c3f97cfa93312</anchor>
      <arglist>(const std::string &amp;absfilepath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_cvmat</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a8ae14fa16e3fe587215befb8df837678</anchor>
      <arglist>(const std::string &amp;fname, const cv::Mat &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_cvmat</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a4302c4377292b2c6dc2813cf5bb2b225</anchor>
      <arglist>(const std::string &amp;fname, cv::Mat &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_sparse_vector</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a9884d909273925e1b75717527e8fcba0</anchor>
      <arglist>(const std::string &amp;fname, const std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_sparse_vector</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>aab5d196a6d0ae2133ad1e76afe91aac2</anchor>
      <arglist>(const std::string &amp;fname, std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>list_files</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a0a7296e96d5d6f6f1f5864387f34c04a</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;ext=&quot;&quot;, bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>basename</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>a963d48f25256d9b41b72bd14259493c1</anchor>
      <arglist>(const std::string &amp;path, bool include_extension=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_text</name>
      <anchorfile>namespacefilesystem.html</anchorfile>
      <anchor>abbd822ce1a5abf780217e390c7aafb13</anchor>
      <arglist>(const std::string &amp;fname, const std::string &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filesystem.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>filesystem_8hpp</filename>
    <namespace>filesystem</namespace>
  </compound>
  <compound kind="file">
    <name>image.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>image_8cxx</filename>
    <includes id="image_8hpp" name="image.hpp" local="yes" imported="no">image.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
  </compound>
  <compound kind="file">
    <name>image.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>image_8hpp</filename>
    <class kind="class">Image</class>
  </compound>
  <compound kind="file">
    <name>misc.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>misc_8cxx</filename>
    <includes id="misc_8hpp" name="misc.hpp" local="yes" imported="no">misc.hpp</includes>
    <namespace>misc</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>get_machine_name</name>
      <anchorfile>namespacemisc.html</anchorfile>
      <anchor>a9f0c17742324dbdf57c70e8644293f45</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>misc.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>misc_8hpp</filename>
    <namespace>misc</namespace>
  </compound>
  <compound kind="file">
    <name>mmap.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>mmap_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>numerics.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>numerics_8cxx</filename>
    <includes id="numerics_8hpp" name="numerics.hpp" local="yes" imported="no">numerics.hpp</includes>
    <namespace>numerics</namespace>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt;</type>
      <name>sparsify</name>
      <anchorfile>namespacenumerics.html</anchorfile>
      <anchor>a1e6c0df487db1cee36260a9e32e56d00</anchor>
      <arglist>(const cv::Mat &amp;dense)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cos_sim</name>
      <anchorfile>namespacenumerics.html</anchorfile>
      <anchor>a9d9eaa0c41af74685eb1fd69c664f149</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;weights0, const std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;weights1, const std::vector&lt; float &gt; &amp;idfw)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>min_hist</name>
      <anchorfile>namespacenumerics.html</anchorfile>
      <anchor>a598b43db43a77c62e037215a270f7383</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;weights0, const std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt; &amp;weights1, const std::vector&lt; float &gt; &amp;idfw)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numerics.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>numerics_8hpp</filename>
    <namespace>numerics</namespace>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; uint32_t, float &gt; &gt;</type>
      <name>sparse_vector_t</name>
      <anchorfile>namespacenumerics.html</anchorfile>
      <anchor>ae2aec37b76d3e62936b82446a06bcc77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vision.cxx</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>vision_8cxx</filename>
    <includes id="vision_8hpp" name="vision.hpp" local="yes" imported="no">vision.hpp</includes>
    <namespace>vision</namespace>
    <member kind="function">
      <type>void</type>
      <name>geo_verify_f</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>a42f0c2d422ec0fdf6aafd4cb8873d857</anchor>
      <arglist>(const cv::Mat &amp;descriptors0, const cv::Mat &amp;points0, const cv::Mat &amp;descriptors1, const cv::Mat &amp;points1, cv::detail::MatchesInfo &amp;matches_info, std::vector&lt; uint32_t &gt; *inliers0=0, std::vector&lt; uint32_t &gt; *inliers1=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geo_verify_h</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>ac83ac71c5790f8d82c005e9ce000c1b2</anchor>
      <arglist>(const cv::Mat &amp;descriptors0, const cv::Mat &amp;points0, const cv::Mat &amp;descriptors1, const cv::Mat &amp;points1, cv::detail::MatchesInfo &amp;matches_info, std::vector&lt; uint32_t &gt; *inliers0=0, std::vector&lt; uint32_t &gt; *inliers1=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compute_sparse_sift_feature</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>af32568481574bcf43057392bd9126b5c</anchor>
      <arglist>(const cv::Mat &amp;img, const std::shared_ptr&lt; const SIFTParams &gt; &amp;params, cv::Mat &amp;keypoints, cv::Mat &amp;descriptors)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compute_bow_feature</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>a928a93b83ae1c965cc653585490f78a8</anchor>
      <arglist>(const cv::Mat &amp;descriptors, const cv::Ptr&lt; cv::DescriptorMatcher &gt; &amp;matcher, cv::Mat &amp;bow_descriptors, std::shared_ptr&lt; std::vector&lt; std::vector&lt; uint32_t &gt; &gt; &gt; cluster_indices)</arglist>
    </member>
    <member kind="function">
      <type>cv::Ptr&lt; cv::DescriptorMatcher &gt;</type>
      <name>construct_descriptor_matcher</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>a79c5004e9d585dc7adc1ae1bbc00d04d</anchor>
      <arglist>(const cv::Mat &amp;vocabulary)</arglist>
    </member>
    <member kind="function">
      <type>cv::Mat</type>
      <name>merge_descriptors</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>a2f9f606d615708aad6f4f7002498b647</anchor>
      <arglist>(std::vector&lt; cv::Mat &gt; &amp;descriptors, bool release_original=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_good_match</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>a69221dfb25d64088d6b576ab2463ab74</anchor>
      <arglist>(const cv::detail::MatchesInfo &amp;matches_info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vision.hpp</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>vision_8hpp</filename>
    <class kind="struct">vision::SIFTParams</class>
    <namespace>vision</namespace>
    <member kind="typedef">
      <type>std::set&lt; std::pair&lt; int, int &gt; &gt;</type>
      <name>MatchesSet</name>
      <anchorfile>namespacevision.html</anchorfile>
      <anchor>add26c57fcfa204b2b9fb763b6ad00057</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matches_page.cxx</name>
    <path>/home/psastras/vocabtree/modules/vis/</path>
    <filename>matches__page_8cxx</filename>
    <includes id="matches__page_8hpp" name="matches_page.hpp" local="yes" imported="no">matches_page.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" imported="no">utils/filesystem.hpp</includes>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>s_stylesheet_name</name>
      <anchorfile>matches__page_8cxx.html</anchorfile>
      <anchor>a4118bc2c6d1eda0386db89e89f8990dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matches_page.hpp</name>
    <path>/home/psastras/vocabtree/modules/vis/</path>
    <filename>matches__page_8hpp</filename>
    <includes id="dataset_8hpp" name="dataset.hpp" local="no" imported="no">utils/dataset.hpp</includes>
    <class kind="class">MatchesPage</class>
  </compound>
  <compound kind="class">
    <name>BagOfWords</name>
    <filename>classBagOfWords.html</filename>
    <base>SearchBase</base>
    <class kind="struct">BagOfWords::MatchResults</class>
    <class kind="struct">BagOfWords::SearchParams</class>
    <class kind="struct">BagOfWords::TrainParams</class>
    <member kind="function">
      <type></type>
      <name>BagOfWords</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a47c36fb60850a08efa153fe881804523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BagOfWords</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a3635991a6a444ee569faf7589347c208</anchor>
      <arglist>(const std::string &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>train</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a7c53939693970137d363dee3b69da898</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const TrainParamsBase &gt; &amp;params, const std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt; &amp;examples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>af835436c37019e152e897b84f345a8d3</anchor>
      <arglist>(const std::string &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a8b0d3b0cba9657b9a4b4530c843928f5</anchor>
      <arglist>(const std::string &amp;file_path) const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MatchResultsBase &gt;</type>
      <name>search</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>ad84a19badd7963c2e20641516e822b61</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const SearchParamsBase &gt; &amp;params, const std::shared_ptr&lt; const Image &gt; &amp;example)</arglist>
    </member>
    <member kind="function">
      <type>cv::Mat</type>
      <name>vocabulary</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a2a7ab6abb7ee4148a023aba4ed6f15e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>num_clusters</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a887846d5ce1da96d69b6cf40e0fe0fd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchBase</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a7aba064ebd8ce5f40aad2607c701f001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchBase</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a03054c23b9be014cdef02b892d799a0e</anchor>
      <arglist>(const std::string &amp;file_path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SearchBase</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>aa391cf064522f21c45f211da66882463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; MatchResultsBase &gt; &gt;</type>
      <name>search</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a8589889c76c103d15f75f0d55baf8fa0</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; SearchParamsBase &gt; &amp;params, const std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt; &amp;examples)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cv::Mat</type>
      <name>vocabulary_matrix</name>
      <anchorfile>classBagOfWords.html</anchorfile>
      <anchor>a4190bc42b672da183025c2e798155f02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BagOfWords::MatchResults</name>
    <filename>structBagOfWords_1_1MatchResults.html</filename>
    <base>MatchResultsBase</base>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>tfidf_scores</name>
      <anchorfile>structBagOfWords_1_1MatchResults.html</anchorfile>
      <anchor>ae389f1fd981e8571767be552d2ed159e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; uint64_t &gt;</type>
      <name>matches</name>
      <anchorfile>structMatchResultsBase.html</anchorfile>
      <anchor>aba6a7554c61bf5f8429120c58c97606b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BagOfWords::SearchParams</name>
    <filename>structBagOfWords_1_1SearchParams.html</filename>
    <base>SearchParamsBase</base>
  </compound>
  <compound kind="struct">
    <name>BagOfWords::TrainParams</name>
    <filename>structBagOfWords_1_1TrainParams.html</filename>
    <base>TrainParamsBase</base>
    <member kind="variable">
      <type>uint32_t</type>
      <name>numClusters</name>
      <anchorfile>structBagOfWords_1_1TrainParams.html</anchorfile>
      <anchor>acd3b584a1f0b67c0a4ac1edfeaf09089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>numFeatures</name>
      <anchorfile>structBagOfWords_1_1TrainParams.html</anchorfile>
      <anchor>afe39818135c25ceb13d2b3901a528da4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cvmat_header</name>
    <filename>structcvmat__header.html</filename>
    <member kind="variable">
      <type>uint64_t</type>
      <name>elem_size</name>
      <anchorfile>structcvmat__header.html</anchorfile>
      <anchor>ab1156ab3006cb634c23e836c23e1f880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>elem_type</name>
      <anchorfile>structcvmat__header.html</anchorfile>
      <anchor>a2e642b14dc5e5e0c7d7343b4c716c50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>rows</name>
      <anchorfile>structcvmat__header.html</anchorfile>
      <anchor>a09ca491336dde9ae4af2c1ea8aa6c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>cols</name>
      <anchorfile>structcvmat__header.html</anchorfile>
      <anchor>a76c437502b110c5d026c71977ddd8ba2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dataset</name>
    <filename>classDataset.html</filename>
    <member kind="function">
      <type></type>
      <name>Dataset</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a0a61b1bc944336ce81737c9f07d26c13</anchor>
      <arglist>(const std::string &amp;base_location)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dataset</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>aab7b38cb00062d8829dfb936fcd8d4f7</anchor>
      <arglist>(const std::string &amp;base_location, const std::string &amp;db_data_location)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dataset</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a7f38b79ccbf9ada90d68d3a50250b193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>aa4fee6b7d35d52a0ed56875371cf391c</anchor>
      <arglist>(const std::string &amp;db_data_location)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a39223855be0678ff51a1abfd13b83e74</anchor>
      <arglist>(const std::string &amp;db_data_location)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Image &gt;</type>
      <name>image</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a2b025f14638b6503644fe4bd98c7617a</anchor>
      <arglist>(uint64_t id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64_t</type>
      <name>num_images</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a3250d45d768eb9d8076e447a8bc0f44c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>location</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a1be6c736cec176a950234ea610abf3e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>location</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a1ff0b7af20efb2069a4375f54fd069cd</anchor>
      <arglist>(const std::string &amp;relative_path) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>add_image</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a7d5047443f2073423f256e86c2aa0234</anchor>
      <arglist>(const std::shared_ptr&lt; const Image &gt; &amp;image)=0</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt;</type>
      <name>all_images</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>aade5bdeb81e85b7f9e1b10e53320a979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt;</type>
      <name>random_images</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a91c2c23a825bb557c24cb893d474f93e</anchor>
      <arglist>(size_t count) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Dataset &gt;</type>
      <name>shard</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>ad27e0b47c2457bfa864c6259651b3925</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;new_locations)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>data_directory</name>
      <anchorfile>classDataset.html</anchorfile>
      <anchor>a8b6b91935142fb1bffb8155676995d4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Image</name>
    <filename>classImage.html</filename>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa0430ef96457eafaf585ff54abc8194f</anchor>
      <arglist>(uint64_t image_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a0294f63700543e11c0f0da85601c7ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>feature_path</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>aa4903872aaca70ea52f2a219602d6ff2</anchor>
      <arglist>(const std::string &amp;feat_name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>location</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a435ae2f2e056122f1ce6857548a16c6c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>id</name>
      <anchorfile>classImage.html</anchorfile>
      <anchor>a9800c46cdd3a9b037eee627a9c0a8259</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InvertedIndex</name>
    <filename>classInvertedIndex.html</filename>
    <base>SearchBase</base>
    <class kind="struct">InvertedIndex::MatchResults</class>
    <class kind="struct">InvertedIndex::SearchParams</class>
    <class kind="struct">InvertedIndex::TrainParams</class>
    <member kind="function">
      <type></type>
      <name>InvertedIndex</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a29cb6e37c9bf93ac94c2c6985c4224a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvertedIndex</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a4c72186acb5b96054e522354f398257e</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>train</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>ad0d9cb36a504b0debdf1a47bb6d77e8e</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const TrainParamsBase &gt; &amp;params, const std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt; &amp;examples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a815b5aaa4565500df3aa2eb92f865535</anchor>
      <arglist>(const std::string &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a3864d16c75319e4d38d03145ad3dcc5f</anchor>
      <arglist>(const std::string &amp;file_path) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>num_clusters</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a59d124d016aba23efb4b1231e1017cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MatchResultsBase &gt;</type>
      <name>search</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a2932dcda6816fb08348f89203f2a8acf</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const SearchParamsBase &gt; &amp;params, const std::shared_ptr&lt; const Image &gt; &amp;example)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; uint64_t &gt; &gt;</type>
      <name>inverted_index</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a0b14366e8875227d1bc9c05b24a6d993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; float &gt;</type>
      <name>idf_weights</name>
      <anchorfile>classInvertedIndex.html</anchorfile>
      <anchor>a4b1b6dbbd8d234a70deb80ad2ee19d04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InvertedIndex::MatchResults</name>
    <filename>structInvertedIndex_1_1MatchResults.html</filename>
    <base>MatchResultsBase</base>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>tfidf_scores</name>
      <anchorfile>structInvertedIndex_1_1MatchResults.html</anchorfile>
      <anchor>a8acc0fd9cd82f3c0a794f63de97a75d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InvertedIndex::SearchParams</name>
    <filename>structInvertedIndex_1_1SearchParams.html</filename>
    <base>SearchParamsBase</base>
  </compound>
  <compound kind="struct">
    <name>InvertedIndex::TrainParams</name>
    <filename>structInvertedIndex_1_1TrainParams.html</filename>
    <base>TrainParamsBase</base>
    <member kind="variable">
      <type>std::shared_ptr&lt; BagOfWords &gt;</type>
      <name>bag_of_words</name>
      <anchorfile>structInvertedIndex_1_1TrainParams.html</anchorfile>
      <anchor>ac2dd137ecdf27afdfad06ceef555372d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatchesPage</name>
    <filename>classMatchesPage.html</filename>
    <member kind="function">
      <type></type>
      <name>MatchesPage</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a88d5e20360d4c345e5f81bfa2bf275e9</anchor>
      <arglist>(uint32_t max_matches_per_page=16, uint32_t max_images_per_match=16)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatchesPage</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a32d81abe2cc3bbd4395bb8cba6dd6214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_match</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a701caedfb7a1f46a2e710ac8d8cd31a5</anchor>
      <arglist>(uint32_t query_id, std::vector&lt; uint64_t &gt; &amp;match_ids, const Dataset &amp;dataset, std::shared_ptr&lt; std::vector&lt; int &gt; &gt; validated=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a6899a6eba95103363da7a6fc9f5c2ae9</anchor>
      <arglist>(const std::string &amp;folder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>stylesheet</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a254f34e89b0de9ba0ffe126a181f5f98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>header</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a2c6742d8e6513b3771d1413678147a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>footer</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>acb451523f8e99f8182882dfd2a511972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>navbar</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a9629dc607640bcda4c71097e50aac98c</anchor>
      <arglist>(uint32_t cur_page, uint32_t max_pages) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>pagename</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a2633c2ff66dea20f3c9fa0fee5541d1f</anchor>
      <arglist>(uint32_t cur_page) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>html_strings</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>a145fbdd474e1ef37ca8ded494e5d2743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>max_matches_per_page_</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>ad2026dec02840e7a1806a5d25350833b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>max_images_per_match_</name>
      <anchorfile>classMatchesPage.html</anchorfile>
      <anchor>aea1d37e2deb0b543486a62fd74327295</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MatchResultsBase</name>
    <filename>structMatchResultsBase.html</filename>
  </compound>
  <compound kind="class">
    <name>SearchBase</name>
    <filename>classSearchBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>train</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a7f8a2ba4698c76ef8ca5b608e5de2ea4</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const TrainParamsBase &gt; &amp;params, const std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt; &amp;examples)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a8af6d745f82a66b25fcf8cc012ff6e3e</anchor>
      <arglist>(const std::string &amp;file_path)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>ae221617eb05aa616397da75fa1760345</anchor>
      <arglist>(const std::string &amp;file_path) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::shared_ptr&lt; MatchResultsBase &gt;</type>
      <name>search</name>
      <anchorfile>classSearchBase.html</anchorfile>
      <anchor>a8b42b92d30c0b4b7f5d43012f6232f8d</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const SearchParamsBase &gt; &amp;params, const std::shared_ptr&lt; const Image &gt; &amp;example)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SearchParamsBase</name>
    <filename>structSearchParamsBase.html</filename>
  </compound>
  <compound kind="class">
    <name>SimpleDataset</name>
    <filename>classSimpleDataset.html</filename>
    <base>Dataset</base>
    <class kind="class">SimpleDataset::SimpleImage</class>
    <member kind="function">
      <type></type>
      <name>SimpleDataset</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>ad064a69a0ee47529f2dd18f82575a43b</anchor>
      <arglist>(const std::string &amp;base_location)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDataset</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>aa6e20a02118446d1ce6c618194c21dad</anchor>
      <arglist>(const std::string &amp;base_location, const std::string &amp;db_data_location)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleDataset</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>ad2c27d786eb81c46b18f99bed9dc2c20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>a823512d4c42988cb2ae444d83e427670</anchor>
      <arglist>(const std::string &amp;db_data_location)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>ad1796ff9bf06fd775e59033862ab3881</anchor>
      <arglist>(const std::string &amp;db_data_location)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Image &gt;</type>
      <name>image</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>a74ccac82fe0034cab5684d137d093a12</anchor>
      <arglist>(uint64_t id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_image</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>ac5aad7db897421cbfc514723ea3644aa</anchor>
      <arglist>(const std::shared_ptr&lt; const Image &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>num_images</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>a74d2eb39bfe3e13d018ee32661909872</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct_dataset</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>abbcf7ae5cdfb9b214884ace34287d4be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::bimap&lt; std::string, uint64_t &gt;</type>
      <name>id_image_map</name>
      <anchorfile>classSimpleDataset.html</anchorfile>
      <anchor>a334076e2238805b485d59f4a058b6f7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleDataset::SimpleImage</name>
    <filename>classSimpleDataset_1_1SimpleImage.html</filename>
    <base>Image</base>
    <member kind="function">
      <type></type>
      <name>SimpleImage</name>
      <anchorfile>classSimpleDataset_1_1SimpleImage.html</anchorfile>
      <anchor>ab9a3925d415cced8a3a949a59bd13b44</anchor>
      <arglist>(const std::string &amp;path, uint64_t imageid)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>feature_path</name>
      <anchorfile>classSimpleDataset_1_1SimpleImage.html</anchorfile>
      <anchor>a52572cf12c70ac838995585307548751</anchor>
      <arglist>(const std::string &amp;feat_name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>location</name>
      <anchorfile>classSimpleDataset_1_1SimpleImage.html</anchorfile>
      <anchor>ac5fc639e05e14ff7a2eec79af79ea221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>image_path</name>
      <anchorfile>classSimpleDataset_1_1SimpleImage.html</anchorfile>
      <anchor>a7ceefe624bfb388d9d19590cdf839666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TrainParamsBase</name>
    <filename>structTrainParamsBase.html</filename>
  </compound>
  <compound kind="class">
    <name>VocabTree</name>
    <filename>classVocabTree.html</filename>
    <base>SearchBase</base>
    <class kind="struct">VocabTree::MatchResults</class>
    <class kind="struct">VocabTree::SearchParams</class>
    <class kind="struct">VocabTree::TrainParams</class>
    <class kind="struct">VocabTree::TreeNode</class>
    <member kind="function">
      <type></type>
      <name>VocabTree</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>af3aec1ffd6c9ce7ad5b85f477d1a163d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>train</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>aaf9c57f3d8924489f1f627ac146b792c</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const TrainParamsBase &gt; &amp;params, const std::vector&lt; std::shared_ptr&lt; const Image &gt; &gt; &amp;examples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>ad8645f1901ce25a989dacfba7642d328</anchor>
      <arglist>(const std::string &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>ac0fcc2c407d6ad58d6589996ff023f3f</anchor>
      <arglist>(const std::string &amp;file_path) const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; MatchResultsBase &gt;</type>
      <name>search</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a5f2e1e4f74178cf901a55f5ab8464933</anchor>
      <arglist>(Dataset &amp;dataset, const std::shared_ptr&lt; const SearchParamsBase &gt; &amp;params, const std::shared_ptr&lt; const Image &gt; &amp;example)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>tree_splits</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>ad03781b2b2aabae3d2c1adc6b1cc27bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>tree_depth</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>ab9fcdee663231eee8fe39491653c3ebb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildTreeRecursive</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>af0f6f4da15b2e8569198a5a490de35f8</anchor>
      <arglist>(uint32_t t, const cv::Mat &amp;descriptors, cv::TermCriteria &amp;tc, int attempts, int flags, int currLevel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; float &gt;</type>
      <name>generateVector</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>aca3d3fedbda379a45bf95a63d217ce80</anchor>
      <arglist>(const cv::Mat &amp;descriptors, bool shouldWeight, int64_t id=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; float &gt;</type>
      <name>generateVector</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>acf2a16833429a3d19aef18f157f906fc</anchor>
      <arglist>(const cv::Mat &amp;descriptors, bool shouldWeight, std::unordered_set&lt; uint32_t &gt; &amp;possibleMatches, int64_t id=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateVectorHelper</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>aaf5841ebc34bd4986235e357a716681f</anchor>
      <arglist>(uint32_t nodeIndex, const cv::Mat &amp;descriptor, std::vector&lt; float &gt; &amp;counts, std::unordered_set&lt; uint32_t &gt; &amp;possibleMatches, int64_t id=-1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>split</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a6ab3b90e1675f17341675ca1419aad7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxLevel</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a4ade9822092326165d8710d8b1f7c639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>numberOfNodes</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a4644191b6219ad132cc516216389eed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; float &gt;</type>
      <name>weights</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a183aed20b90dacfa47a454d6223bb094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TreeNode &gt;</type>
      <name>tree</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a8dc8006fa8e445b834aa800f2e6f2069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::unordered_map&lt; uint64_t, uint32_t &gt; &gt;</type>
      <name>invertedFiles</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>a34e29a505f7c44a172c95bf8e9119e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; uint64_t, std::vector&lt; float &gt; &gt;</type>
      <name>databaseVectors</name>
      <anchorfile>classVocabTree.html</anchorfile>
      <anchor>af726c5bf8c1cae60b2d0753121322e6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VocabTree::MatchResults</name>
    <filename>structVocabTree_1_1MatchResults.html</filename>
    <base>MatchResultsBase</base>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>tfidf_scores</name>
      <anchorfile>structVocabTree_1_1MatchResults.html</anchorfile>
      <anchor>a00cf3256deacff07bddb455b30b7075a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VocabTree::SearchParams</name>
    <filename>structVocabTree_1_1SearchParams.html</filename>
    <base>SearchParamsBase</base>
  </compound>
  <compound kind="struct">
    <name>VocabTree::TrainParams</name>
    <filename>structVocabTree_1_1TrainParams.html</filename>
    <base>TrainParamsBase</base>
    <member kind="variable">
      <type>uint32_t</type>
      <name>depth</name>
      <anchorfile>structVocabTree_1_1TrainParams.html</anchorfile>
      <anchor>a19cf8b48b0421b61e6d509e23aa505e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>split</name>
      <anchorfile>structVocabTree_1_1TrainParams.html</anchorfile>
      <anchor>af2eec2a04b76dd1b075cf68d259492c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VocabTree::TreeNode</name>
    <filename>structVocabTree_1_1TreeNode.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>invertedFileLength</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>addc988fc7d198f71958c83de6c25ed9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>level</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>a7f4c9ee4ec78d7fe4b43a4565b23a8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>levelIndex</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>a83b223b6e9bb26d121cebc2b1030cb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>index</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>afc8881e214f02c7741fb17899e551f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cv::Mat</type>
      <name>mean</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>a048f59b318335ecbaf184bd721509b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>firstChildIndex</name>
      <anchorfile>structVocabTree_1_1TreeNode.html</anchorfile>
      <anchor>a627cfb600c7368bd5d6020d519d971b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CycleTimer</name>
    <filename>namespaceCycleTimer.html</filename>
  </compound>
  <compound kind="namespace">
    <name>filesystem</name>
    <filename>namespacefilesystem.html</filename>
    <class kind="struct">filesystem::cvmat_header</class>
  </compound>
  <compound kind="struct">
    <name>filesystem::cvmat_header</name>
    <filename>structfilesystem_1_1cvmat__header.html</filename>
    <member kind="variable">
      <type>uint64_t</type>
      <name>elem_size</name>
      <anchorfile>structfilesystem_1_1cvmat__header.html</anchorfile>
      <anchor>a0a5c08bca19d68690a6f0e3669749ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>elem_type</name>
      <anchorfile>structfilesystem_1_1cvmat__header.html</anchorfile>
      <anchor>abc301239a5e24f7d05388c0866158a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>rows</name>
      <anchorfile>structfilesystem_1_1cvmat__header.html</anchorfile>
      <anchor>acdcf543a27c35af493a6e2e77e4beac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>cols</name>
      <anchorfile>structfilesystem_1_1cvmat__header.html</anchorfile>
      <anchor>ab8ef888e91c088f0d74931b13c84ca56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>misc</name>
    <filename>namespacemisc.html</filename>
  </compound>
  <compound kind="namespace">
    <name>numerics</name>
    <filename>namespacenumerics.html</filename>
  </compound>
  <compound kind="namespace">
    <name>vision</name>
    <filename>namespacevision.html</filename>
    <class kind="struct">vision::SIFTParams</class>
  </compound>
  <compound kind="struct">
    <name>vision::SIFTParams</name>
    <filename>structvision_1_1SIFTParams.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>max_features</name>
      <anchorfile>structvision_1_1SIFTParams.html</anchorfile>
      <anchor>ac519d46a13cec9f91f3c3ef92fb87602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_octave_layers</name>
      <anchorfile>structvision_1_1SIFTParams.html</anchorfile>
      <anchor>ad7d01eb10b930f6e4e672aa507bc5779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contrast_threshold</name>
      <anchorfile>structvision_1_1SIFTParams.html</anchorfile>
      <anchor>a0e1f28715aead1d238d7e0399bf779bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>edge_threshold</name>
      <anchorfile>structvision_1_1SIFTParams.html</anchorfile>
      <anchor>a4cecc47e477c8df5d7d1e4bc5816df2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>structvision_1_1SIFTParams.html</anchorfile>
      <anchor>a89a1e7850a2a8a662df90b2c2bbdb638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/search/bag_of_words</name>
    <path>/home/psastras/vocabtree/modules/search/bag_of_words/</path>
    <filename>dir_3c1be978b2b4f47fb76c498f67e69700.html</filename>
    <file>bag_of_words.cxx</file>
    <file>bag_of_words.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/bench</name>
    <path>/home/psastras/vocabtree/modules/bench/</path>
    <filename>dir_590cdc53477aa77bc1d1d60b81d129aa.html</filename>
    <file>bench_all.cxx</file>
    <file>bench_bow.cxx</file>
    <file>bench_compute_features.cxx</file>
    <file>bench_config.hpp</file>
    <file>bench_index.cxx</file>
    <file>bench_search.cxx</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/search/inverted_index</name>
    <path>/home/psastras/vocabtree/modules/search/inverted_index/</path>
    <filename>dir_03f38306a2300424939f71a46ac3c879.html</filename>
    <file>inverted_index.cxx</file>
    <file>inverted_index.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules</name>
    <path>/home/psastras/vocabtree/modules/</path>
    <filename>dir_e05d7e2b1ecd646af5bb94391405f3b5.html</filename>
    <dir>/home/psastras/vocabtree/modules/bench</dir>
    <dir>/home/psastras/vocabtree/modules/search</dir>
    <dir>/home/psastras/vocabtree/modules/tests</dir>
    <dir>/home/psastras/vocabtree/modules/utils</dir>
    <dir>/home/psastras/vocabtree/modules/vis</dir>
    <file>config.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/search</name>
    <path>/home/psastras/vocabtree/modules/search/</path>
    <filename>dir_fd1717190c36556d2776daec21b52a8a.html</filename>
    <dir>/home/psastras/vocabtree/modules/search/bag_of_words</dir>
    <dir>/home/psastras/vocabtree/modules/search/inverted_index</dir>
    <dir>/home/psastras/vocabtree/modules/search/search_base</dir>
    <dir>/home/psastras/vocabtree/modules/search/vocab_tree</dir>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/search/search_base</name>
    <path>/home/psastras/vocabtree/modules/search/search_base/</path>
    <filename>dir_3cab43559b9e2964b58e66b30f925370.html</filename>
    <file>search_base.cxx</file>
    <file>search_base.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/tests</name>
    <path>/home/psastras/vocabtree/modules/tests/</path>
    <filename>dir_c3948e10a686cac736dc859286b87ee9.html</filename>
    <file>compute_bow_simple.cxx</file>
    <file>compute_index_simple.cxx</file>
    <file>compute_search_simple.cxx</file>
    <file>compute_sift_simple.cxx</file>
    <file>tests_config.hpp</file>
    <file>vocab_tree_simple.cxx</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/utils</name>
    <path>/home/psastras/vocabtree/modules/utils/</path>
    <filename>dir_2cd352c31e16031ace7077fb0dbfbf02.html</filename>
    <file>cycletimer.hpp</file>
    <file>dataset.cxx</file>
    <file>dataset.hpp</file>
    <file>filesystem.cxx</file>
    <file>filesystem.hpp</file>
    <file>image.cxx</file>
    <file>image.hpp</file>
    <file>misc.cxx</file>
    <file>misc.hpp</file>
    <file>mmap.hpp</file>
    <file>numerics.cxx</file>
    <file>numerics.hpp</file>
    <file>vision.cxx</file>
    <file>vision.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/vis</name>
    <path>/home/psastras/vocabtree/modules/vis/</path>
    <filename>dir_9443631f92ae98ae53c487930a45de6c.html</filename>
    <file>matches_page.cxx</file>
    <file>matches_page.hpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/psastras/vocabtree/modules/search/vocab_tree</name>
    <path>/home/psastras/vocabtree/modules/search/vocab_tree/</path>
    <filename>dir_4ff5b70ea48e7a8c0b5c235c8a364d39.html</filename>
    <file>vocab_tree.cxx</file>
    <file>vocab_tree.hpp</file>
  </compound>
</tagfile>
