
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

PROJECT(vocabtree)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Lib output dir")
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Binary output dir")

# defaulting to release build
IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE  "Release" CACHE STRING "Type of build (Debug Release RelWithDebInfo MinSizeRel)" FORCE) 
ENDIF ()

IF(CMAKE_COMPILER_IS_GNUCC)
        SET(WARNING_FLAGS "-Wall -Wno-strict-aliasing")
        SET(PARALLEL_FLAGS "-D_GLIBCXX_PARALLEL")
        SET(ARCHITECTURE_FLAGS "-mtune=native -march=native")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_INIT} ${WARNING_FLAGS} ${ARCHITECTURE_FLAGS} -g")

IF (APPLE)
  SET(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Build arch for OS X" FORCE)
ENDIF (APPLE)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

FIND_PACKAGE(Boost REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

# Enable openmp
find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

# Enable c++11x
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libstdc++")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
	EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	IF(GCC_VERSION VERSION_LESS 4.2)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	ELSEIF(GCC_VERSION VERSION_LESS 4.7)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	ENDIF()
ENDIF()

# -----------------------------------------------------------------------------

SET(VOCAB_TREE_INCLUDE  ${PROJECT_SOURCE_DIR}/modules/)
ADD_SUBDIRECTORY(modules)
