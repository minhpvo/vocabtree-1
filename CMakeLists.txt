
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

#check for oddly named compiler versions (such as those on warp)
FIND_PROGRAM(GNUCXX44_COMPILER g++44)
FIND_PROGRAM(GNUC44_COMPILER gcc44)
IF(GNUCXX44_COMPILER)
  SET(CMAKE_CXX_COMPILER ${GNUCXX44_COMPILER})
ENDIF()
IF(GNUC44_COMPILER)
  SET(CMAKE_C_COMPILER ${GNUC44_COMPILER})
ENDIF()

PROJECT(vocabtree)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "Lib output dir")
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "Binary output dir")

# defaulting to release build
IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE  "Release" CACHE STRING "Type of build (Debug Release RelWithDebInfo MinSizeRel)" FORCE) 
ENDIF ()

IF (APPLE)
  SET(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Build arch for OS X" FORCE)
ENDIF (APPLE)

IF(CMAKE_COMPILER_IS_GNUCC)
        SET(WARNING_FLAGS "-Wall -Wno-strict-aliasing")
        SET(PARALLEL_FLAGS "-D_GLIBCXX_PARALLEL")
        SET(ARCHITECTURE_FLAGS "-mtune=native -march=native")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_INIT} ${WARNING_FLAGS} ${ARCHITECTURE_FLAGS} -g")



SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

FIND_PACKAGE(Boost REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

# Enable openmp / mpi
FIND_PACKAGE(OpenMP)
FIND_PACKAGE(MPI)

# Enable c++11x
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libstdc++")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
	EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	IF(GCC_VERSION VERSION_LESS 4.2)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
	ELSEIF(GCC_VERSION VERSION_LESS 4.7)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -fpermissive")
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fpermissive")
	ENDIF()
ENDIF()

# doxygen
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
	ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating API documentation with Doxygen" VERBATIM)
ENDIF(DOXYGEN_FOUND)

# options

OPTION(ENABLE_MULTITHREAD "Enable multithreading (requires OpenMP)" ON)
IF(ENABLE_MULTITHREAD)
	SET(ENABLE_MULTITHREAD 1)
ELSE()
	SET(ENABLE_MULTITHREAD 0)
ENDIF()

IF(OPENMP_FOUND AND ENABLE_MULTITHREAD)
	SET(ENABLE_OPENMP 1)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ELSE()
	SET(ENABLE_OPENMP 0)
ENDIF()


OPTION(ENABLE_MULTINODE "Enable multi node support (requires MPI)" ON)
IF(MPI_FOUND AND ENABLE_MULTINODE)
	SET(ENABLE_MPI 1)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MPI_COMPILE_FLAGS}")
	SET(CMAKE_C_LINK_FLAGS "${CMAKE_C_LINK_FLAGS} ${MPI_LINK_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MPI_COMPILE_FLAGS}")
    SET(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS}")
	INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
ELSE()
	SET(ENABLE_MPI 0)
ENDIF()
SET(ENABLE_MPI 1)

OPTION(ENABLE_FASTCLUSTER "Enable fast clustering (requires mpi and yasm)" OFF)
IF(UNIX AND ENABLE_MULTINODE)
	FIND_PROGRAM(YASM_EXECUTABLE yasm)
	IF(MPI_FOUND AND YASM_EXECUTABLE AND ENABLE_FASTCLUSTER)
		FIND_PACKAGE(FastCluster)
		IF(FASTCLUSTER_FOUND)
			SET(ENABLE_FASTCLUSTER 1)
		ELSE()
			SET(ENABLE_FASTCLUSTER 0)
		ENDIF()
	ELSE()
		SET(ENABLE_FASTCLUSTER 0)
	ENDIF()
ENDIF()
SET(ENABLE_FASTCLUSTER 0)
CONFIGURE_FILE(
		${CMAKE_SOURCE_DIR}/scripts/config.py.cmake
		${CMAKE_SOURCE_DIR}/scripts/config.py
)

SET(VOCAB_TREE_INCLUDE ${PROJECT_SOURCE_DIR}/modules/)
SET(VOCAB_TREE_3RDPARTY_DIR ${PROJECT_SOURCE_DIR}/3rdparty/)
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(modules)

