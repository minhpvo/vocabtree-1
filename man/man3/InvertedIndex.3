.TH "InvertedIndex" 3 "Wed Nov 6 2013" "Version 0.0.1" "vocabtree" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InvertedIndex \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <inverted_index\&.hpp>\fP
.PP
Inherits \fBSearchBase\fP\&.
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMatchResults\fP"
.br
.ti -1c
.RI "struct \fBSearchParams\fP"
.br
.ti -1c
.RI "struct \fBTrainParams\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInvertedIndex\fP ()"
.br
.ti -1c
.RI "bool \fBtrain\fP (const std::shared_ptr< const \fBTrainParamsBase\fP > &params, const std::vector< std::shared_ptr< const \fBImage\fP > > &examples)"
.br
.ti -1c
.RI "bool \fBload\fP (const std::string &file_path)"
.br
.ti -1c
.RI "bool \fBsave\fP (const std::string &file_path) const "
.br
.ti -1c
.RI "std::shared_ptr< \fBMatchResultsBase\fP > \fBsearch\fP (const std::shared_ptr< const \fBSearchParamsBase\fP > &params, const std::shared_ptr< const \fBImage\fP > &example)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 5 of file inverted_index\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "InvertedIndex::InvertedIndex ()"

.PP
Definition at line 4 of file inverted_index\&.cxx\&.
.PP
.nf
                             : SearchBase() {


}
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool InvertedIndex::load (const std::string &file_path)\fC [virtual]\fP"

.PP
Implements \fBSearchBase\fP\&.
.PP
Definition at line 9 of file inverted_index\&.cxx\&.
.PP
.nf
                                                    {
        std::cout << 'Reading inverted index from ' << file_path << '\&.\&.\&.' << std::endl;

        // code here

        std::cout << 'Done reading inverted index\&.' << std::endl;
        
        return false;
}
.fi
.SS "bool InvertedIndex::save (const std::string &file_path) const\fC [virtual]\fP"

.PP
Implements \fBSearchBase\fP\&.
.PP
Definition at line 20 of file inverted_index\&.cxx\&.
.PP
.nf
                                                          {
        std::cout << 'Writing inverted index to ' << file_path << '\&.\&.\&.' << std::endl;

        // code here

        std::cout << 'Done writing inverted index\&.' << std::endl;

        return false;
}
.fi
.SS "std::shared_ptr< \fBMatchResultsBase\fP > InvertedIndex::search (const std::shared_ptr< const \fBSearchParamsBase\fP > &params, const std::shared_ptr< const \fBImage\fP > &example)\fC [virtual]\fP"

.PP
Implements \fBSearchBase\fP\&.
.PP
Definition at line 50 of file inverted_index\&.cxx\&.
.PP
Referenced by main()\&.
.PP
.nf
                                                                                                                                                      {
        std::cout << 'Searching for matching images\&.\&.\&.' << std::endl;
        const std::shared_ptr<const SearchParams> &ii_params = std::static_pointer_cast<const SearchParams>(params);
        
        std::shared_ptr<MatchResults> match_result = std::make_shared<MatchResults>();

        // returns zero as the only match with a score of zero
        match_result->tfidf_scores\&.push_back(0\&.f);
        match_result->matches\&.push_back(0);

        return (std::shared_ptr<MatchResultsBase>)match_result;
}
.fi
.SS "bool InvertedIndex::train (const std::shared_ptr< const \fBTrainParamsBase\fP > &params, const std::vector< std::shared_ptr< const \fBImage\fP > > &examples)\fC [virtual]\fP"

.PP
Implements \fBSearchBase\fP\&.
.PP
Definition at line 30 of file inverted_index\&.cxx\&.
.PP
References InvertedIndex::TrainParams::numClusters\&.
.PP
Referenced by main()\&.
.PP
.nf
                                                                                                                                       {
        const std::shared_ptr<const TrainParams> &ii_params = std::static_pointer_cast<const TrainParams>(params);
        uint32_t k = ii_params->numClusters;
        uint32_t n = ii_params->numFeatures;

        std::cout << 'Training inverted index with ' << k << ' clusters on ' << n << ' features\&.' << std::endl;
        std::cout << 'Reading features from disk\&.\&.\&.' << std::endl;
        for(size_t i=0; i<examples\&.size(); i++) {
                const std::string sift_feat_path = examples[i]->feature_path('sift');
                
                //load sift

                // push back feature
        }
        std::cout << 'Clustering\&.\&.\&.' << std::endl;
        // cluster all features
        std::cout << 'Done training inverted index\&.' << std::endl;
        return false;
}
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for vocabtree from the source code\&.
